# Define custom scalars
scalar DateTime
scalar URL

# Enum type
enum Role {
  ADMIN
  USER
}

enum Role {
  GUEST
}

# Interface for common fields
interface Node {
  id: ID!
  createdAt: DateTime!
}

# Types implementing Node interface
type User implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  role: Role!
  profilePicture: URL
  posts: [Post!]!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  content: String!
  author: User!
}

# Union type
union SearchResult = User | Post

# Input types for mutations
input CreateUserInput {
  name: String!
  email: String!
  role: Role!
  profilePicture: URL
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  role: Role
  profilePicture: URL
}

input CreatePostAndUpdateUser {
  updateUser: UpdateUserInput!
  createPost: CreatePostInput!
}

# Query type
type Query {
  users: [User!]!
  posts: [Post!]!
  search(term: String!): [SearchResult!]!
  node(id: ID!): Node!

  nonnullableScalar: String!
  nullableScalar: String

  nonnullablesNonnullableScalars: [String!]!
  nullableNonnullableScalars: [String!]
  nullableNullableScalars: [String]

  nonnullablesNonnullableNonnullableScalars: [[String!]!]!
  nullableNullableNullableScalars: [[String]]

  queryWithVariables(
    nonnullableScalar: String!,
    nullableScalar: String,
    nonnullablesNonnullableScalars: [String!]!,
    nullableNullableScalars: [String],
    nonnullablesNonnullableNonnullableScalars: [[String!]!]!,
    nullableNullableNullableScalars: [[String]],
  ): Boolean
}

# Mutation type
type Mutation {
  createUser(input: CreateUserInput!): User!
  createPost(input: CreatePostInput!): Post!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}

# Subscription type
type Subscription {
  userCreated: User!
  postCreated: Post!
}
